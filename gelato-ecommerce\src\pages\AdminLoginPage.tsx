import { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { FaUser, FaLock, FaEye, FaEyeSlash, FaArrowLeft } from 'react-icons/fa';
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-hot-toast';
import { useAuthStore } from '../store';
import { authAPI } from '../services/api';
import { LoginForm } from '../types';

const AdminLoginPage = () => {\n  const navigate = useNavigate();\n  const { login, isAuthenticated } = useAuthStore();\n  \n  const [formData, setFormData] = useState<LoginForm>({\n    username: '',\n    password: ''\n  });\n  \n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [attempts, setAttempts] = useState(0);\n  const [lockUntil, setLockUntil] = useState<number | null>(null);\n\n  // 如果已經登入，重定向到管理後台\n  useEffect(() => {\n    if (isAuthenticated) {\n      navigate('/admin');\n    }\n  }, [isAuthenticated, navigate]);\n\n  // 檢查是否被鎖定\n  useEffect(() => {\n    const checkLockStatus = () => {\n      if (lockUntil && Date.now() < lockUntil) {\n        const timeLeft = Math.ceil((lockUntil - Date.now()) / 1000);\n        if (timeLeft > 0) {\n          setTimeout(checkLockStatus, 1000);\n        } else {\n          setLockUntil(null);\n          setAttempts(0);\n        }\n      }\n    };\n    \n    if (lockUntil) {\n      checkLockStatus();\n    }\n  }, [lockUntil]);\n\n  const handleInputChange = (field: keyof LoginForm, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // 檢查是否被鎖定\n    if (lockUntil && Date.now() < lockUntil) {\n      const timeLeft = Math.ceil((lockUntil - Date.now()) / 1000);\n      toast.error(`登入被鎖定，請等待 ${timeLeft} 秒後再試`);\n      return;\n    }\n    \n    if (!formData.username.trim() || !formData.password.trim()) {\n      toast.error('請輸入帳號和密碼');\n      return;\n    }\n    \n    setIsLoading(true);\n    \n    try {\n      const response = await authAPI.login(formData);\n      \n      if (response.success && response.data) {\n        // 登入成功\n        login(response.data.user);\n        localStorage.setItem('auth-token', response.data.token);\n        toast.success('登入成功！');\n        navigate('/admin');\n        \n        // 重置嘗試次數\n        setAttempts(0);\n        setLockUntil(null);\n      } else {\n        // 登入失敗\n        const newAttempts = attempts + 1;\n        setAttempts(newAttempts);\n        \n        if (newAttempts >= 5) {\n          // 鎖定30分鐘\n          const lockTime = Date.now() + 30 * 60 * 1000;\n          setLockUntil(lockTime);\n          toast.error('登入失敗次數過多，帳號已被鎖定30分鐘');\n        } else {\n          toast.error(`帳號或密碼錯誤 (${newAttempts}/5)`);\n        }\n      }\n    } catch (error) {\n      console.error('登入失敗:', error);\n      \n      const newAttempts = attempts + 1;\n      setAttempts(newAttempts);\n      \n      if (newAttempts >= 5) {\n        const lockTime = Date.now() + 30 * 60 * 1000;\n        setLockUntil(lockTime);\n        toast.error('登入失敗次數過多，帳號已被鎖定30分鐘');\n      } else {\n        toast.error(`登入失敗，請檢查網路連線 (${newAttempts}/5)`);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const isLocked = lockUntil && Date.now() < lockUntil;\n  const lockTimeLeft = isLocked ? Math.ceil((lockUntil! - Date.now()) / 1000) : 0;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-pink-50 flex items-center justify-center px-4\">\n      {/* 返回首頁按鈕 */}\n      <button\n        onClick={() => navigate('/')}\n        className=\"absolute top-6 left-6 flex items-center space-x-2 text-gray-600 hover:text-gray-800 transition-colors\"\n      >\n        <FaArrowLeft />\n        <span>返回首頁</span>\n      </button>\n\n      <motion.div\n        className=\"bg-white rounded-2xl shadow-xl p-8 w-full max-w-md\"\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n      >\n        {/* 標題區域 */}\n        <div className=\"text-center mb-8\">\n          <motion.div\n            className=\"text-6xl mb-4\"\n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            transition={{ delay: 0.2, type: 'spring', stiffness: 200 }}\n          >\n            🍨\n          </motion.div>\n          <h1 className=\"text-2xl font-bold text-gray-800 mb-2\">\n            管理員登入\n          </h1>\n          <p className=\"text-gray-600\">\n            海水不可斗量 - 後台管理系統\n          </p>\n        </div>\n\n        {/* 登入表單 */}\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* 帳號輸入 */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              管理員帳號\n            </label>\n            <div className=\"relative\">\n              <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                <FaUser className=\"text-gray-400\" />\n              </div>\n              <input\n                type=\"text\"\n                value={formData.username}\n                onChange={(e) => handleInputChange('username', e.target.value)}\n                disabled={isLocked || isLoading}\n                className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent disabled:bg-gray-100 disabled:cursor-not-allowed transition-colors\"\n                placeholder=\"請輸入管理員帳號\"\n                required\n              />\n            </div>\n          </div>\n\n          {/* 密碼輸入 */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              密碼\n            </label>\n            <div className=\"relative\">\n              <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                <FaLock className=\"text-gray-400\" />\n              </div>\n              <input\n                type={showPassword ? 'text' : 'password'}\n                value={formData.password}\n                onChange={(e) => handleInputChange('password', e.target.value)}\n                disabled={isLocked || isLoading}\n                className=\"w-full pl-10 pr-12 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent disabled:bg-gray-100 disabled:cursor-not-allowed transition-colors\"\n                placeholder=\"請輸入密碼\"\n                required\n              />\n              <button\n                type=\"button\"\n                onClick={() => setShowPassword(!showPassword)}\n                disabled={isLocked || isLoading}\n                className=\"absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600 disabled:cursor-not-allowed\"\n              >\n                {showPassword ? <FaEyeSlash /> : <FaEye />}\n              </button>\n            </div>\n          </div>\n\n          {/* 錯誤提示 */}\n          {attempts > 0 && !isLocked && (\n            <motion.div\n              className=\"p-3 bg-yellow-50 border border-yellow-200 rounded-lg\"\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: 'auto' }}\n            >\n              <p className=\"text-sm text-yellow-700\">\n                ⚠️ 登入失敗 {attempts} 次，還有 {5 - attempts} 次機會\n              </p>\n            </motion.div>\n          )}\n\n          {/* 鎖定提示 */}\n          {isLocked && (\n            <motion.div\n              className=\"p-3 bg-red-50 border border-red-200 rounded-lg\"\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: 'auto' }}\n            >\n              <p className=\"text-sm text-red-700\">\n                🔒 帳號已被鎖定，請等待 {Math.floor(lockTimeLeft / 60)}:{(lockTimeLeft % 60).toString().padStart(2, '0')} 後再試\n              </p>\n            </motion.div>\n          )}\n\n          {/* 登入按鈕 */}\n          <button\n            type=\"submit\"\n            disabled={isLocked || isLoading || !formData.username.trim() || !formData.password.trim()}\n            className=\"w-full bg-blue-500 text-white py-3 rounded-lg font-medium hover:bg-blue-600 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors relative overflow-hidden\"\n          >\n            {isLoading ? (\n              <motion.div\n                className=\"flex items-center justify-center space-x-2\"\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n              >\n                <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                <span>登入中...</span>\n              </motion.div>\n            ) : isLocked ? (\n              `已鎖定 ${Math.floor(lockTimeLeft / 60)}:${(lockTimeLeft % 60).toString().padStart(2, '0')}`\n            ) : (\n              '登入管理後台'\n            )}\n          </button>\n        </form>\n\n        {/* 預設帳密提示 */}\n        <div className=\"mt-6 p-4 bg-gray-50 border border-gray-200 rounded-lg\">\n          <h3 className=\"text-sm font-medium text-gray-700 mb-2\">預設登入資訊：</h3>\n          <div className=\"text-sm text-gray-600 space-y-1\">\n            <p>帳號：admin</p>\n            <p>密碼：admin123</p>\n            <p className=\"text-xs text-amber-600 mt-2\">\n              ⚠️ 建議首次登入後立即更改密碼\n            </p>\n          </div>\n        </div>\n\n        {/* 安全提示 */}\n        <div className=\"mt-4 text-center\">\n          <p className=\"text-xs text-gray-500\">\n            為保障系統安全，連續登入失敗5次將鎖定帳號30分鐘\n          </p>\n        </div>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default AdminLoginPage;"
